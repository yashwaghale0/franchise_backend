// controllers/userController.js
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const crypto = require("crypto");
const sendEmail = require("../utils/email"); // see nodemailer snippet below

exports.createUserByAdmin = async (req, res) => {
  try {
    const {
      email,
      password,
      role,
      firstName,
      lastName,
      phoneNumber,
      company,
      brandName,
      calendlyUrl,
      membershipType,
      issuanceDate,
      sendWelcomeEmail,
      requirePasswordChange,
    } = req.body;

    if (!email) return res.status(400).json({ msg: "Email required" });

    const existing = await User.findOne({ email });
    if (existing) return res.status(400).json({ msg: "Email already exists" });

    let rawPassword = password;
    let autoGenerated = false;
    if (!rawPassword) {
      // generate temp password
      rawPassword = crypto.randomBytes(6).toString("base64").slice(0, 10);
      autoGenerated = true;
    }

    const hashed = await bcrypt.hash(rawPassword, 10);

    const user = new User({
      email,
      password: hashed,
      role: role || undefined,
      firstName,
      lastName,
      phoneNumber,
      company,
      brandName,
      calendlyUrl,
      membershipType,
      issuanceDate: issuanceDate ? new Date(issuanceDate) : undefined,
      requirePasswordChange:
        requirePasswordChange !== undefined
          ? requirePasswordChange
          : autoGenerated,
    });

    await user.save();

    if (sendWelcomeEmail) {
      // send a welcome email â€” either include the temporary password (less ideal)
      // or better: include a password reset link. For simplicity here we'll email temp password
      await sendEmail({
        to: email,
        subject: "Your new account",
        text: `An account was created for you. Email: ${email}\nPassword: ${rawPassword}\nPlease change it after login.`,
      });
    }

    res.status(201).json({
      msg: "User created",
      user: { id: user._id, email: user.email, role: user.role },
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: "Server error" });
  }
};

// controllers/userController.js (append)
exports.updateMyProfile = async (req, res) => {
  try {
    const updates = req.body; // validate allowed fields in real app
    const userId = req.user._id;

    // prevent changing email to someone else's email (optional check)
    if (updates.email) {
      const exists = await User.findOne({
        email: updates.email,
        _id: { $ne: userId },
      });
      if (exists) return res.status(400).json({ msg: "Email already in use" });
    }

    const user = await User.findByIdAndUpdate(userId, updates, {
      new: true,
    }).select("-password");
    res.json({ user });
  } catch (err) {
    res.status(500).json({ msg: "Server error" });
  }
};

// Admin updating another user
exports.updateUserByAdmin = async (req, res) => {
  // check req.user role in middleware
  const { id } = req.params;
  const updates = req.body;
  // do validation & role checks as needed
  const user = await User.findByIdAndUpdate(id, updates, { new: true }).select(
    "-password"
  );
  res.json({ user });
};

exports.savePersonalDetails = async (req, res) => {
  try {
    const { fullName, phone, address } = req.body;

    const user = await User.findByIdAndUpdate(
      req.user.id, // from protect middleware
      { fullName, phone, address },
      { new: true, runValidators: true }
    );

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json({ message: "Personal details saved", user });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};
